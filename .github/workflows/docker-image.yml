name: Docker Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Create image for a specific tag'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download release assets (current ref)
        if: ${{ github.ref_type == 'tag' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p docker-context
          gh release download "${{ github.ref_name }}" \
          --pattern "*.tbz" \
          --dir docker-context
          mv docker-context/dune*.tbz docker-context/dune.tbz

      - name: Download release assets (latest if ref is not present)
        if: ${{ github.ref_type == 'branch'}}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p docker-context
          gh release download "${{ github.event.inputs.tag }}" \
          --pattern "*.tbz" \
          --dir docker-context
          mv docker-context/dune*.tbz docker-context/dune.tbz

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          build-contexts: tarball=./docker-context
          file: ./docker/release.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
